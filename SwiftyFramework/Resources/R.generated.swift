//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")
    
    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `NotoSerifSC-Bold`.
    static let notoSerifSCBold = Rswift.FontResource(fontName: "NotoSerifSC-Bold")
    /// Font `NotoSerifSC-Medium`.
    static let notoSerifSCMedium = Rswift.FontResource(fontName: "NotoSerifSC-Medium")
    /// Font `NotoSerifSC-Regular`.
    static let notoSerifSCRegular = Rswift.FontResource(fontName: "NotoSerifSC-Regular")
    /// Font `NotoSerifSC-SemiBold`.
    static let notoSerifSCSemiBold = Rswift.FontResource(fontName: "NotoSerifSC-SemiBold")
    
    /// `UIFont(name: "NotoSerifSC-Bold", size: ...)`
    static func notoSerifSCBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSerifSCBold, size: size)
    }
    
    /// `UIFont(name: "NotoSerifSC-Medium", size: ...)`
    static func notoSerifSCMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSerifSCMedium, size: size)
    }
    
    /// `UIFont(name: "NotoSerifSC-Regular", size: ...)`
    static func notoSerifSCRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSerifSCRegular, size: size)
    }
    
    /// `UIFont(name: "NotoSerifSC-SemiBold", size: ...)`
    static func notoSerifSCSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSerifSCSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.notoSerifSCBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSerifSC-Bold' could not be loaded, is 'NotoSerifSC-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSerifSCMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSerifSC-Medium' could not be loaded, is 'NotoSerifSC-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSerifSCRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSerifSC-Regular' could not be loaded, is 'NotoSerifSC-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSerifSCSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSerifSC-SemiBold' could not be loaded, is 'NotoSerifSC-SemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
